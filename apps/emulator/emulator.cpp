#include <iostream>
#include <stdint.h>
#include "VirtualCPU.h"
#include <chrono>
#include <vector>

using namespace gnilk;
using namespace gnilk::vcpu;

using std::chrono::high_resolution_clock;
using std::chrono::duration_cast;
using std::chrono::duration;
using std::chrono::milliseconds;

static uint8_t program[] = {
};
double testperf() {
    uint8_t program[]= {
        0x20,0x01,0x03,0x01, 0x44,0x33,
        0x20,0x00,0x03,0x01, 0x44,
        0x20,0x01,0x03,0x01, 0x44,0x33,
        0x20,0x02,0x03,0x01, 0x44,0x33,0x22,0x11,
        0x20,0x03,0x03,0x01, 0x88,0x77,0x66,0x55,0x44,0x33,0x22,0x11,
        0x20,0x01,0x13,0x01, 0x44,0x33,
        0x20,0x00,0x23,0x01, 0x44,
        0x20,0x01,0x33,0x01, 0x44,0x33,
        0x20,0x02,0x43,0x01, 0x44,0x33,0x22,0x11,
        0x20,0x03,0x43,0x01, 0x88,0x77,0x66,0x55,0x44,0x33,0x22,0x11,
        0x20,0x01,0x03,0x01, 0x44,0x33,
        0x20,0x00,0x03,0x01, 0x44,
        0x20,0x01,0x03,0x01, 0x44,0x33,
        0x20,0x02,0x03,0x01, 0x44,0x33,0x22,0x11,
        0x20,0x03,0x03,0x01, 0x88,0x77,0x66,0x55,0x44,0x33,0x22,0x11,
        0x20,0x01,0x13,0x01, 0x44,0x33,
        0x20,0x00,0x23,0x01, 0x44,
        0x20,0x01,0x33,0x01, 0x44,0x33,
        0x20,0x02,0x43,0x01, 0x44,0x33,0x22,0x11,
        0x20,0x03,0x43,0x01, 0x88,0x77,0x66,0x55,0x44,0x33,0x22,0x11,
        0x20,0x01,0x03,0x01, 0x44,0x33,
        0x20,0x00,0x03,0x01, 0x44,
        0x20,0x01,0x03,0x01, 0x44,0x33,
        0x20,0x02,0x03,0x01, 0x44,0x33,0x22,0x11,
        0x20,0x03,0x03,0x01, 0x88,0x77,0x66,0x55,0x44,0x33,0x22,0x11,
        0x20,0x01,0x13,0x01, 0x44,0x33,
        0x20,0x00,0x23,0x01, 0x44,
        0x20,0x01,0x33,0x01, 0x44,0x33,
        0x20,0x02,0x43,0x01, 0x44,0x33,0x22,0x11,
        0x20,0x03,0x43,0x01, 0x88,0x77,0x66,0x55,0x44,0x33,0x22,0x11,
        0x20,0x01,0x03,0x01, 0x44,0x33,
        0x20,0x00,0x03,0x01, 0x44,
        0x20,0x01,0x03,0x01, 0x44,0x33,
        0x20,0x02,0x03,0x01, 0x44,0x33,0x22,0x11,
        0x20,0x03,0x03,0x01, 0x88,0x77,0x66,0x55,0x44,0x33,0x22,0x11,
        0x20,0x01,0x13,0x01, 0x44,0x33,
        // End of code - special instr. to break emulation
        0xff,
    };
    VirtualCPU vcpu;
    vcpu.Begin(program, 1024);
    auto &regs = vcpu.GetRegisters();
    // Verify intermediate mode reading works for 8,16,32,64 bit sizes
    auto t1 = high_resolution_clock::now();

    for(int i=0;i<100000;i++) {
        vcpu.Reset();
        while(vcpu.Step()) {
            // do nothing
        }
    }

    auto t2 = high_resolution_clock::now();
    auto ms_int = duration_cast<milliseconds>(t2 - t1);
    duration<double, std::milli> ms_double = t2 - t1;
    fmt::println("  Duration={} msec", ms_double.count());
    return ms_double.count();

}

int main()
{
    std::vector<double> perfValues;
    for(int i=0;i<100;i++) {
        auto v = testperf();
        perfValues.push_back(v);
    }
    auto avg = 0.0f;
    for(auto v : perfValues) {
        avg += v / 100.0f;
    }
    fmt::println("average: {}", avg);
    return 0;
}
